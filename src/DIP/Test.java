//Класс Test демонстрирует использование классов, реализующих принцип инверсии зависимостей (DIP). Давайте прокомментируем этот код:
package DIP;

public class Test {
    public static void main(String[] args) {
        // Создание объекта Car с бензиновым двигателем и его запуск
        Car car = new Car(new PetrolEngine());
        car.start();

        // Создание объекта Car с дизельным двигателем и его запуск
        car = new Car(new DieselPetrol());
        car.start();
    }
}

//оздание объекта с бензиновым двигателем: В этой части кода создается объект Car и внедряется конкретная реализация двигателя - PetrolEngine. Это соответствует принципу инверсии зависимостей (DIP), так как Car зависит от абстракции Engine через интерфейс, и внедрение разных типов двигателей без изменения кода Car становится возможным.

//Запуск бензинового двигателя: Вызывается метод start() у объекта car, что приводит к запуску бензинового двигателя, и сообщение выводится в консоль.

//Создание объекта с дизельным двигателем и его запуск: Затем создается новый объект Car, и на этот раз внедряется другая реализация двигателя - DieselPetrol. Затем вызывается метод start() для этого объекта car, что приводит к запуску дизельного двигателя, и сообщение также выводится в консоль.
